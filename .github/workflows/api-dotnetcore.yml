name: API (.NET Core)

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./backend
      codeCov-token: ${{ secrets.CodeCov }}

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101
      - name: Install dependencies
        run: dotnet restore
        working-directory: ${{env.working-directory}}
      - name: Install coverlet for code coverage
        run: dotnet tool install -g coverlet.console
        working-directory: ${{env.working-directory}}
      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{env.working-directory}}
      - name: Test
        run: dotnet test --no-restore --verbosity normal
        working-directory: ${{env.working-directory}}

        # For future reference, if we have N test projects the flow of events would be:
        #
        # **Pre-conditions:**
        # - All projects export their individual coverage percents in JSON and OpenCover format
        # - There's no way to merge OpenCover xmls together (that I could find)
        # - Common folder "../TestResults" is  git ignored so nothing gets in source control
        #
        # **Steps:**
        #
        # - Test-project 1
        #   - generate coverage files (without merging)
        #   - copy results to common folder "../TestResults"
        # - Test-project 2
        #   - generate coverage files merging with previous `coverage.json`
        #   - the previous `coverage.opencoverage.xml` is ignored
        #   - copy results to common folder "../TestResults"
        # ...
        # - Test-project N
        #   - generate coverage files merging with previous `coverage.json`
        #   - the previous `coverage.opencoverage.xml` is ignored
        #   - copy results to common folder "../TestResults"
        #
        # The final `coverage.opencover.xml` is the one we want
      - name: Generate code coverage
        working-directory: ${{env.working-directory}}/tests/unit
        run: |
          mkdir -p TestResults
          rm -rf api/TestResults
          rm -rf dal/TestResults
          cd api
          dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore
          mv TestResults/*/* ../TestResults/
          cd ..
          cd dal
          dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore
          mv TestResults/*/* ../TestResults/
          cd ..
          head TestResults/coverage.opencover.xml
      - name: Codecov
        uses: codecov/codecov-action@v1.0.7
        with:
          # User defined upload name. Visible in Codecov UI
          name: PIMS
          # Repository upload token - get it from codecov.io. Required only for private repositories
          token: ${{env.codeCov-token}}
          # Path to coverage file to upload
          file: ${{env.working-directory}}/tests/unit/TestResults/coverage.opencover.xml
          # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
          flags: unittests
          # Environment variables to tag the upload with (e.g. PYTHON | OS,PYTHON)
          env_vars: C#
          # Specify whether or not CI build should fail if Codecov runs into an error during upload
          fail_ci_if_error: false

        #################################################
        ##       Steps below run only on PRs           ##
        #################################################
      - if: ${{ github.event_name == 'pull_request' }}
        name: Install sonar scanner
        run: dotnet tool install -g dotnet-sonarscanner --version 4.9.0
      - if: ${{ github.event_name == 'pull_request' }}
        name: Run sonar-dotnet scan
        working-directory: ./openshift
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          OC_JOB_NAME: pr-${{ github.event.pull_request.number }}
          SKIP_OC_LOGIN: 1
        run: ./player.sh scan-dotnet $OC_JOB_NAME -apply
      - if: ${{ github.event_name == 'pull_request' }}
        name: Find Comment
        uses: peter-evans/find-comment@v1.0.1
        id: fc
        with:
          token: ${{ secrets.PR_COMMENT_PAT }}
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: Backend API Sonar Scan Report
      - if: ${{ github.event_name == 'pull_request' }}
        name: Create or Update comment
        uses: peter-evans/create-or-update-comment@v1.4.2
        with:
          token: ${{ secrets.PR_COMMENT_PAT }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## Backend API Sonar Scan Report

            [![Quality gate](https://sonarqube-jcxjin-tools.pathfinder.gov.bc.ca/api/project_badges/quality_gate?project=pims-api-pr-${{ github.event.pull_request.number }})](https://sonarqube-jcxjin-tools.pathfinder.gov.bc.ca/dashboard?id=pims-api-pr-${{ github.event.pull_request.number }})

            #### Quality Metrics
            [![Bugs](https://sonarqube-jcxjin-tools.pathfinder.gov.bc.ca/api/project_badges/measure?project=pims-api-pr-${{ github.event.pull_request.number }}&metric=bugs)](https://sonarqube-jcxjin-tools.pathfinder.gov.bc.ca/dashboard?id=pims-api-pr-${{ github.event.pull_request.number }})
            [![Vulnerabilities](https://sonarqube-jcxjin-tools.pathfinder.gov.bc.ca/api/project_badges/measure?project=pims-api-pr-${{ github.event.pull_request.number }}&metric=vulnerabilities)](https://sonarqube-jcxjin-tools.pathfinder.gov.bc.ca/dashboard?id=pims-api-pr-${{ github.event.pull_request.number }})
            [![Code Smells](https://sonarqube-jcxjin-tools.pathfinder.gov.bc.ca/api/project_badges/measure?project=pims-api-pr-${{ github.event.pull_request.number }}&metric=code_smells)](https://sonarqube-jcxjin-tools.pathfinder.gov.bc.ca/dashboard?id=pims-api-pr-${{ github.event.pull_request.number }})
            [![Coverage](https://sonarqube-jcxjin-tools.pathfinder.gov.bc.ca/api/project_badges/measure?project=pims-api-pr-${{ github.event.pull_request.number }}&metric=coverage)](https://sonarqube-jcxjin-tools.pathfinder.gov.bc.ca/dashboard?id=pims-api-pr-${{ github.event.pull_request.number }})
